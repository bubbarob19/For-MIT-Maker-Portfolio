on right click on nether gold ore:
	cookingTable(player)

function cookingTable(p: player):
	play sound "entity.chicken.egg" to {_p}
	open virtual chest inventory with size 6 named "&f&lCOOKING TABLE" to {_p}
	format gui slot (integers between 45 and 53) of {_p} with red stained glass pane named "&1"
	format gui slot 33 of {_p} with black stained glass pane named "&1"
	format gui slot 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 17, 18, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, and 44 of {_p} with light gray stained glass pane named "&1"

on inventory click:
	if name of event-inventory is "&f&lCOOKING TABLE":
		if click type is left mouse button:
			if clicked slot is 33:
				if player's current inventory = event-inventory:
					getcookitem(player, event-item)
				else:
					cook(player)
			else:
				cook(player)
		if click type is right mouse button:
			if clicked slot is 33:
				if player's current inventory = event-inventory:
					getcookitem(player, event-item)
				else:
					cook(player)
			else:
				cook(player)
		else if click type is left mouse button with shift:
			if clicked slot is 33:
				if player's current inventory = event-inventory:
					getmanycookitems(player, event-item)
				else:
					cook(player)
			else:
				cook(player)
		else if click type is right mouse button with shift:
			if clicked slot is 33:
				if player's current inventory = event-inventory:
					getmanycookitems(player, event-item)
				else:
					cook(player)
			else:
				cook(player)
		else:
			stop

on inventory drag:
	if name of event-inventory is "&f&lCOOKING TABLE":
		cook(player)

on inventory close:
	if name of event-inventory is "&f&lCOOKING TABLE":
		loop 9 times:
			if loop-number is 1:
				set {_n} to 9
			else if loop-number is 4:
				set {_n} to 15
			else if loop-number is 7:
				set {_n} to 21
			set {_s::%loop-number%} to slot (loop-number + {_n}) of event-inventory
			if {_s::%loop-number%} is not air:
				set {_ia::%loop-number%} to item amount of {_s::%loop-number%}
				if player can hold {_ia::%loop-number%} of {_s::%loop-number%}:
					give player {_ia::%loop-number%} of {_s::%loop-number%}
				else:
					drop {_ia::%loop-number%} of {_s::%loop-number%} at player's location
		loop 3 times:
			if slot (loop-number + 13) of event-inventory is not air:
				if player can hold (item amount of slot (loop-number + 13) of event-inventory) of (slot (loop-number + 13) of event-inventory):
					give player (item amount of slot (loop-number + 13) of event-inventory) of (slot (loop-number + 13) of event-inventory)

function cook(p: player):
	wait 1 tick
	loop indices of {cookingtable::*}:
		set {_l} to loop-value
		set {_h} to 0
		set {_u} to uuid of {_p}
		loop 9 times:
			if loop-number is 1:
				set {_n} to 9
			else if loop-number is 4:
				set {_n} to 15
			else if loop-number is 7:
				set {_n} to 21
			if slot (loop-number + {_n}) of {_p}'s current inventory is {cookingtable::%{_l}%::slot%loop-number%}:
				if item amount of {cookingtable::%{_l}%::slot%loop-number%} is less than or equal to item amount of slot (loop-number + {_n}) of {_p}'s current inventory:
					add 1 to {_h}
				else:
					if {cookingtable::%{_l}%::slot%loop-number%} is air:
						add 1 to {_h}
		if {_h} is 9:
			loop 3 times:
				if {cookingtable::%{_l}%::tool%loop-number%} is set:	
					if slot 14 of {_p}'s current inventory is {cookingtable::%{_l}%::tool%loop-number%}:
						add 1 to {_m}
					else if slot 15 of {_p}'s current inventory is {cookingtable::%{_l}%::tool%loop-number%}:
						add 1 to {_m}
					else if slot 16 of {_p}'s current inventory is {cookingtable::%{_l}%::tool%loop-number%}:
						add 1 to {_m}
				else:
					add 1 to {_m}
			if {_m} is 3:
				if {cookingskilllevel::%{_u}%} is greater than or equal to {cookingtable::%{_l}%::level}:
					format gui slot 33 of {_p} with {cookingtable::%{_l}%::result}
					format gui slot 45, 46, 47, 48, 49, 50, 51, 52, and 53 of {_p} with lime stained glass pane named "&1"
					stop
		format gui slot 33 of {_p} with black stained glass pane named "&1"
		format gui slot 45, 46, 47, 48, 49, 50, 51, 52, and 53 of {_p} with red stained glass pane named "&1"

function getcookitem(p: player, i: item):
	if {_i} is black stained glass pane named "&1":
		stop
	loop indices of {cookingtable::*}:
		set {_l} to loop-value
		if {_i} is {cookingtable::%{_l}%::result}:
			loop 9 times:
				if loop-number is 1:
					set {_n} to 9
				else if loop-number is 4:
					set {_n} to 15
				else if loop-number is 7:
					set {_n} to 21
				if slot (loop-number + {_n}) of {_p}'s current inventory is {cookingtable::%{_l}%::slot%loop-number%}:
					if item amount of {cookingtable::%{_l}%::slot%loop-number%} is less than or equal to item amount of slot (loop-number + {_n}) of {_p}'s current inventory:
						add 1 to {_h}
					else:
						if {cookingtable::%{_l}%::slot%loop-number%} is air:
							add 1 to {_h}
		if {_h} is 9:
			collectionitemget({_p}, {_i})
			set {_ia} to item amount of {cookingtable::%{_l}%::result}
			if cursor item of {_p} is air:
				set cursor item of {_p} to {_ia} of {cookingtable::%{_l}%::result}
			else:
				if {_p}'s current cursor is {_i}:
					set {_v} to item amount of {_p}'s cursor
					set {_q} to {_v} + {_ia}
					if {_q} is greater than or equal to 64:
						stop
					set cursor item of {_p} to {_q} of {cookingtable::%{_l}%::result}
				else:
					stop
			loop 9 times:
				if loop-number is 1:
					set {_n} to 9
				else if loop-number is 4:
					set {_n} to 15
				else if loop-number is 7:
					set {_n} to 21
				set {_s::%loop-number%} to item amount of {cookingtable::%{_l}%::slot%loop-number%}
				if {cookingtable::%{_l}%::slot%loop-number%} is not air:
					remove {_s::%loop-number%} of {cookingtable::%{_l}%::slot%loop-number%} from slot ({_n} + loop-number) of {_p}'s current inventory
			cook({_p})
			cooking({_p}, {cookingtable::%{_l}%::weight}, 1)
			stop

function getmanycookitems(p: player, i: item):
	if {_i} is black stained glass pane named "&1":
		stop
	loop indices of {cookingtable::*}:
		set {_h} to 0
		set {_l} to loop-value
		if {_i} is {cookingtable::%{_l}%::result}:
			loop 9 times:
				if loop-number is 1:
					set {_n} to 9
				else if loop-number is 4:
					set {_n} to 15
				else if loop-number is 7:
					set {_n} to 21
				if slot (loop-number + {_n}) of {_p}'s current inventory is {cookingtable::%{_l}%::slot%loop-number%}:
					if item amount of {cookingtable::%{_l}%::slot%loop-number%} is less than or equal to item amount of slot (loop-number + {_n}) of {_p}'s current inventory:
						add 1 to {_h}
					else:
						if {cookingtable::%{_l}%::slot%loop-number%} is air:
							add 1 to {_h}
			if {_h} is 9:		
				set {_itemamount} to item amount of {cookingtable::%{_l}%::result}
				loop 9 times:
					if loop-number is 1:
						set {_n} to 9
					else if loop-number is 4:
						set {_n} to 15
					else if loop-number is 7:
						set {_n} to 21
					set {_s::%loop-number%} to slot (loop-number + {_n}) of {_p}'s current inventory
					if {_s::%loop-number%} is not air:
						set {_ia::%loop-number%} to floor(item amount of {_s::%loop-number%} / item amount of {cookingtable::%{_l}%::slot%loop-number%})
				set {_g} to min({_ia::*})
				set {_b} to {_g} * {_itemamount}
				if {_p} cannot hold {_b} of {_i}:
					if {_p} cannot hold {_itemamount} of {_i}:
						stop
						stop loop
					else:
						while {_p} cannot hold {_b} of {_i}:
							set {_g} to ({_g} - 1)
							set {_b} to {_g} * {_itemamount}
				loop 9 times:
					if loop-number is 1:
						set {_n} to 9
					else if loop-number is 4:
						set {_n} to 15
					else if loop-number is 7:
						set {_n} to 21
					set {_y::%loop-number%} to {_g} * item amount of {cookingtable::%{_l}%::slot%loop-number%}
					if {cookingtable::%{_l}%::slot%loop-number%} is not air:
						remove {_y::%loop-number%} of {cookingtable::%{_l}%::slot%loop-number%} from slot ({_n} + loop-number) of {_p}'s current inventory
				collectionitemget({_p}, {_i})
				give {_p} {_b} of {_i}
				cooking({_p}, {cookingtable::%{_l}%::weight}, {_g})
				cook({_p})
				stop

command /cook [<text>] [<text>] [<integer>] [<number>]:
	permission: cook.command
	permission message: &cHey! You can't do that!
	trigger:
		set {_arg2} to arg-2
		set {_arg3} to arg-3
		set {_arg4} to arg-4
		if arg-1 is "create":
			if {_arg2} is set:
				if {_arg3} is between 0 and 50:
					if {_arg4} is set:
						if {cookingtable::%{_arg2}%::result} is not set:
							play sound "entity.chicken.egg" to player
							open virtual chest inventory with size 6 named "&cSet Recipe" to player
							format gui slot (integers between 45 and 53) of player with white stained glass pane named "&f&lFORMAT THE SLOTS WITH YOUR RECIPE"
							format gui slot 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 17, 18, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, and 44 of player with light gray stained glass pane named "&1"
							format gui slot 49 of player with lime concrete named "&a&lCONFIRM" to run:
								set {_a} to 9
								if slot 10 or 11 or 12 or 19 or 20 or 21 or 28 or 29 or 30 of player's current inventory is not air:
									if slot 33 of player's current inventory is not air:
										loop 9 times:
											if loop-number is 4 or 7:
												add 6 to {_a}
											set {cookingtable::%{_arg2}%::slot%loop-number%} to slot (loop-number + {_a}) of player's current inventory
											give player (item amount of {cookingtable::%{_arg2}%::slot%loop-number%}) of {cookingtable::%{_arg2}%::slot%loop-number%}
										loop 3 times:
											if slot (13 + loop-number) of player's current inventory is not air:
												add 1 to {_n}
												set {cookingtable::%{_arg2}%::tool%{_n}%} to slot (13 + loop-number) of player's current inventory
												give player (item amount of {cookingtable::%{_arg2}%::tool%{_n}%}) of {cookingtable::%{_arg2}%::tool%{_n}%}
										set {cookingtable::%{_arg2}%::result} to slot 33 of player's current inventory
										set {cookingtable::%{_arg2}%::level} to {_arg3}
										set {cookingtable::%{_arg2}%::weight} to {_arg4}
										play sound "entity.chicken.egg" to player
										close inventory of player
										send "&c&lBubRPG: &fYou have successfully set the recipe &7(&f%{_arg2}%&7) &fwith a cooking lvl requirement of &7(&f%{_arg3}%&7)!"
									else:
										send "&c&lBubRPG: &fThis cooking recipe must have a result!"
								else:
									send "&c&lBubRPG: &fYou must have at least 1 ingredient for the recipe"
						else:
							send "&c&lBubRPG: &fThis recipe is already set!"
					else:
						send "&c&lBubRPG: &fChoose a weight for your recipe (Higher weight for harder recipe)!"
				else:
					send "&c&lBubRPG: &fChoose a level between 1 and 50 for your recipe!"
			else:
				send "&c&lBubRPG: &fYou must have a name for the cooking recipe to go by!"
		else if arg-1 is "see":
			if {_arg2} is set:
				if {cookingtable::%{_arg2}%::result} is set:
					play sound "entity.chicken.egg" to {_p}
					open virtual chest inventory with size 6 named "&c&lCOOK RECIPE &f%{_arg2}%" to player
					format gui slot (integers between 45 and 53) of player with lime stained glass pane named "&1"
					format gui slot 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 17, 18, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, and 44 of player with light gray stained glass pane named "&1"
					set {_a} to 9
					loop 9 times:
						if loop-number is 4 or 7:
							add 6 to {_a}
						format gui slot (loop-number + {_a}) of player with {cookingtable::%{_arg2}%::slot%loop-number%}
					loop 3 times:
						if {cookingtable::%{_arg2}%::tool%loop-number%} is set:
							format gui slot (13 + loop-number) of player with {cookingtable::%{_arg2}%::tool%loop-number%}
					format gui slot 33 of player with {cookingtable::%{_arg2}%::result}
				else:
					send "&c&lBubRPG: &fThis isn't a recipe!"
			else:
				send "&c&lBubRPG: &fYou must specify a recipe!"
		else if arg-1 is "list":
			play sound "entity.chicken.egg" to player
			loop indices of {cookingtable::*}:
				add 1 to {_an}
				if {_an} is 1:
					set {_msg} to "&f%loop-value%"
				else:
					set {_msg} to "%{_msg}%, %loop-value%"
			send "%{_msg}%" to player
		else if arg-1 is "delete":
			if {_arg2} is set:
				if {cookingtable::%{_arg2}%::result} is set:
					delete {cookingtable::%{_arg2}%::*}
					send "&c&lBubRPG: &fYou have successfully deleted the cook recipe &7(&f%{_arg2}%&7)" to player
				else:
					send "&c&lBubRPG: &fThis isn't a recipe!"
			else:
				send "&c&lBubRPG: &fYou must specify a recipe!"
		else if arg-1 is not set:
			send "%nl%&c&lBubRPG COOKING%nl%%nl%&7» &f/cook create <name> <lvl> <weight>%nl%&7» &f/cook delete <name>%nl%&7» &f/cook see <name>%nl%&7» &f/cook list%nl%&7» &f/cook help%nl%" to player
